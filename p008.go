package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"
)

const digits string = ``

func product(arr []int) int {
	total := 1
	for _, v := range arr {
		total *= v
	}
	return total
}

func highestProduct(limit int) int {
	d := strings.Split(digits, "")
	arr := make([]int, limit, limit)
	idx := 0
	total := 0
	for i := 0; i < len(d); i++ {
		x, _ := strconv.Atoi(d[i])

		arr[idx] = x
		p := product(arr)
		if p > total {
			total = p
		}

		idx++
		if idx == limit {
			idx = 0
		}
	}
	return total
}

func main() {
	start := time.Now()
	total := highestProduct(13)
	elapsed := time.Since(start)

	fmt.Printf("%d - %s\n", total, elapsed)
}
